# -*- coding: utf-8 -*-
"""tf_tiny_week_1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1T3wENT74wDKjJRSLhrZRA_w5Fr3gvLmW
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import tensorflow as tf
import os

import pathlib
import matplotlib
import matplotlib.pyplot as plt

# Use Keras 2.
version_fn = getattr(tf.keras, "version", None)
if version_fn and version_fn().startswith("3."):
  import tf_keras as keras
else:
  keras = tf.keras

matplotlib.use('TkAgg')

print('\u2024 Using TensorFlow Version:', tf.__version__)

# %matplotlib inline

"""#**Create a basic model of the form y = mx + c**"""

# Create a simple Keras model.
x = [-1, 0, 1, 2, 3, 4]
y = [-3, -1, 1, 3, 5, 7]

x = np.asarray(x)
y = np.asarray(y)

model = keras.models.Sequential([
        keras.layers.Dense(units=1, input_shape=[1])
])

model.compile(optimizer='sgd',
              loss='mean_squared_error')

model.fit(x, y, epochs=10)

"""#**Generate a SavedModel**"""

TEST_SAVED_MODEL = "test_saved_model"
tf.saved_model.save(model, export_dir=TEST_SAVED_MODEL)

"""#**Convert the SavedModel to TFLite**"""

# Convert the model
converter = tf.lite.TFLiteConverter.from_saved_model(TEST_SAVED_MODEL)
#converter.optimizations = [tf.lite.Optimize.DEFAULT]
tflite_model = converter.convert()
pass

os.makedirs("content/", exist_ok=True)
tflite_model_file = pathlib.Path('content/model.tflite')
tflite_model_file.write_bytes(tflite_model)
# try:
#     original_umask = os.umask(0)
#     os.makedirs(tflite_model_file, 0o777, exist_ok=True)
# finally:
#     os.umask(original_umask)


"""#**Initialize the TFLite interpreter to try it out**"""

# # Load TFLite model and allocate tensors.
interpreter = tf.lite.Interpreter(model_content=tflite_model)
interpreter.allocate_tensors()

# # Get inputs and output tensors.
input_details = interpreter.get_input_details()
output_details = interpreter.get_output_details()

# # Test the TensorFlowLite model on random input data.
input_shape = input_details[0]['shape']
inputs, tflite_outputs, tf_outputs = [],[], []

for i in range(100):
  input_data = np.array(np.random.random_sample(input_shape), dtype=np.float32)
  interpreter.set_tensor(input_details[0]['index'], input_data)

  interpreter.invoke()
  tflite_results = interpreter.get_tensor(output_details[0]['index'])
  tflite_output_data = np.array(tflite_results)

  # Test the TensorFlow model on random input data
  tf_results = model(tf.constant(input_data))
  output_data = np.array(tf_results)

  inputs.append(input_data[0][0])
  tflite_outputs.append(tflite_output_data[0][0])
  tf_outputs.append(output_data[0][0])

plt.plot(inputs, tf_outputs, 'ob', label='TF')
plt.plot(inputs, tflite_outputs, 'xr', label='TFLite')
plt.legend()
plt.show()
plt.pause(1)

pass